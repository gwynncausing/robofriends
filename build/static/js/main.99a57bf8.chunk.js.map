{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardList","robots","map","user","index","Scroll","style","overflowY","height","this","children","Component","SearchBox","searchChange","onChange","type","placeholder","App","onSearchChange","event","setState","searchfield","target","value","state","console","log","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAgBeA,EAbF,SAACC,GACZ,IAAQC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACE,6BAAKJ,IACL,4BAAIC,WCsBGI,EA7BE,SAACP,GAChB,IAAMQ,EAASR,EAAMQ,OAWrB,OAEE,aADA,CACA,gBACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,EAAD,CACEV,GAAIO,EAAOG,GAAOV,GAClBC,KAAMM,EAAOG,GAAOT,KACpBC,MAAOK,EAAOG,GAAOR,OAChBQ,SCtBXC,E,4JACJ,WACE,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,SAHZ,SAKGC,KAAKhB,MAAMiB,e,GARCC,aAcNN,ICDAO,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKhB,UAAU,MAAf,SACE,uBACEiB,SAAUD,EACVhB,UAAU,mCACVkB,KAAK,SACLC,YAAY,qBCwCLC,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAkBFC,eAAiB,SAACC,GAEhB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAnB1C,EAAKC,MAAQ,CACXvB,OAAQ,GACRoB,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,QAAQC,IAAI,SACZC,MAAM,8CACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACL,EAAKX,SAAS,CAAEnB,OAAQ8B,S,oBAS9B,WACE,MAAgCtB,KAAKe,MAA7BvB,EAAR,EAAQA,OAAQoB,EAAhB,EAAgBA,YACVW,EAAiB/B,EAAOgC,QAAO,SAACC,GACpC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAASf,MAE3C,OAAQpB,EAAOoC,OAGb,sBAAKxC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWgB,aAAcJ,KAAKS,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUjB,OAAQ+B,SANtB,oBAAInC,UAAU,KAAd,yB,GA/BYc,aCOH2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.99a57bf8.chunk.js","sourcesContent":["import React from \"react\";\n\n// const Card = ({ id, name, email }) => {\nconst Card = (props) => {\n  const { id, name, email } = props;\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = (props) => {\n  const robots = props.robots;\n  // const cardsArray = robots.map((user, index) => {\n  //   return (\n  //     <Card\n  //       id={robots[index].id}\n  //       name={robots[index].name}\n  //       email={robots[index].email}\n  //       key={index}\n  //     />\n  //   );\n  // });\n  return (\n    // <div>{cardsArray}</div>\n    <div>\n      {robots.map((user, index) => {\n        return (\n          <Card\n            id={robots[index].id}\n            name={robots[index].name}\n            email={robots[index].email}\n            key={index}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import { Component } from \"react\";\n\nclass Scroll extends Component {\n  render() {\n    return (\n      <div\n        style={{\n          overflowY: \"scroll\",\n          height: \"600px\",\n        }}>\n        {this.props.children}\n      </div>\n    );\n  }\n}\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        onChange={searchChange}\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search Robots'\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"check\");\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((users) => {\n        this.setState({ robots: users });\n      });\n  }\n\n  onSearchChange = (event) => {\n    // console.log(event.target.value);\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const { robots, searchfield } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchfield);\n    });\n    return !robots.length ? (\n      <h1 className='tc'>Loading</h1>\n    ) : (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}